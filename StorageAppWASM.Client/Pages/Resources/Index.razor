@page "/resources"
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@inject NavigationManager Nv
@inject HttpClient Http
@using ClassLibrary.Dto

<h3>Ресурсы</h3>

<FluentButton OnClick=@(() => Nv.NavigateTo("/resources/add"))>Добавить</FluentButton>
<FluentButton OnClick=@(async () => await ShowActive(IsActive))>@((IsActive) ? "Показать архив" : "Показать активные")</FluentButton>
<FluentButton OnClick=@(async () => await GetAll())>Показать все</FluentButton>

@if (resources != null)
{
    <div class="w-50 mt-2">
        <table class="table table-sm table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <td>Наименование</td>
                    <td>Статус</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var resource in resources)
                {
                    <tr @onclick=@(() => HandleCellClick(resource.Id)) data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                        <td>@resource.Title</td>
                        <td>
                            @if (resource.IsActive)
                            {
                                <span class="badge bg-success">Активный</span>
                            }
                            else
                            {
                                <span class="badge bg-warning text-dark">В архиве</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div>Загрузка...</div>
}


@code {
    private IQueryable<ResourceDto>? resources;
    FluentDataGrid<ResourceDto>? grid;
    private bool IsActive = true;

    protected override async Task OnInitializedAsync()
    {        
        await GetData(true);
    }

    private async Task GetData(bool b)
    {
        var items = await Http.GetFromJsonAsync<IEnumerable<ResourceDto>>($"api/resources/{IsActive}");
        resources = items?.AsQueryable().OrderBy(x => x.Id);
    }

    private async Task GetAll()
    {
        var items = await Http.GetFromJsonAsync<IEnumerable<ResourceDto>>($"api/resources");
        resources = items?.AsQueryable().OrderBy(x => x.Id);
    }

    private async Task ShowActive(bool b)
    {
        IsActive = !IsActive;
        await GetData(b);        
    }

    private void HandleCellClick(int id)
    {       
        Nv.NavigateTo($"/resources/edit/{id}");        
    }
}
